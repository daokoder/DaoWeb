
#load sdml2html;

load aux
load web_user
load web_commit

io.writeln( 'content-type: text/plain\n' );

if( User::Current.uid ==0 ) return

const success = '{ "status" : "success", "data" : "/space/$(space)/$(topic)/$(stid)" }';
const failed = '{ "status" : "failed", "data" : "$(info)" }';

#io.writeln( failed.expand( { 'info' => 'Failed to submit text' } ) ); return;

space = HTTP_POST['space'];
title = HTTP_POST['title'];
source = HTTP_POST['source'];
blog = HTTP_POST.has( 'blog' );
forum = HTTP_POST.has( 'forum' );
name = HTTP_POST.has( 'name' ) ? HTTP_POST['name'] : '';
labels = HTTP_POST.has( 'labels' ) ? HTTP_POST['labels'] : '';
edit = HTTP_POST.has( 'edit' ) ? (int) HTTP_POST['edit'] : 0;
reply = HTTP_POST.has( 'reply' ) ? (int) HTTP_POST['reply'] : 0;
section = HTTP_POST.has( 'section' ) ? HTTP_POST['section'] : '';

if( reply ==0 && title.size() ==0 && name.size() ==0 ){
	io.writeln( failed.expand( { 'info' => 'Empty title/name' } ) );
	return;
}else if( reply && title.size() ==0 ){
	title = '...';
}



parser = Sdml2Html();
defer {
	if( 0 == %recover() ) return

	wiki = CompleteText( 2, parser.output, "", 0 ) + '<br clear=all>';
	s = failed.expand( { 'info' => 'Failed to submit text' } );
	suffix = parser.suffix;
	i = 0;
	while( s.find( suffix ) >=0 || wiki.find( suffix ) >=0 )
		suffix = random_string( suffix.size() + (++ i) / 5.0 );
	io.write( suffix, s, suffix, wiki ); 
}
parser.Parse( source );


defer {
	if( %recover() ) io.writeln( failed.expand( { 'info' => 'Failed to submit text' } ) );
}

ret = Text::Commit( title, source, section, '', name, labels, 
		edit, blog, forum, space_owner.uid, User::Current.uid, reply );

kv = { 'space' => space };
if( %name ){
	kv[ 'topic' ] = 'page';
	kv[ 'stid' ] = name;
}else{
	kv[ 'topic' ] = 'thread';
	kv[ 'stid' ] = (string) ret[0];
}
io.writeln( success.expand( kv ) );


#wiki = CompleteText( 2, html, "", 0 )
#io.writeln( wiki );


#io.writeln( HTTP_POST );

