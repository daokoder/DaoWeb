
load web_user


routine GetNewsTitles( space : User )
{
	lid = -1;
	lab = Label::{};
	hd = web_database.Select( Label ).Where().EQ( 'uid', space.uid ).EQ( 'name' )
	if( hd.Bind( 'news' ).QueryOnce( lab ) ) lid = lab.lid
	member = Text::title_index;
	hd = web_database.Select( TextLabeling, SpaceText, Text, member ).Where()
		.EQ( TextLabeling, 'lid', lid )
		.Match( TextLabeling, SpaceText, 'tid' )
		.EQ( SpaceText, 'blog', 1 )
		.GT( SpaceText, 'time_create', time_now - 2*month_in_seconds )
		.EQ( SpaceText, 'stid_reply', 0 )
		.Match( SpaceText, Text, 'tid' )
		.Sort( SpaceText, 'time_create', 1 ).Range( 10 );
	#stdio.println( hd.sqlstring() );
	news : list<news_t> = {};
	txt = Text::{};
	sptxt = SpaceText::{};
	tlab = TextLabeling::{};
	hd.Query( tlab, sptxt, txt ){
		thd = (news_t)('','','');
		thd.tid = (string) sptxt.stid;
		thd.topic = txt.title;
		thd.time = FormatTime( sptxt.time_create );
		news.append( thd );
	}
	return news;
}

routine GetTextStat( user : User, year = 0, month = 0, day = 0 )
{
	stat = TextStat::{};
	signup = sys::ctime( user.time_signup )
	now = sys::ctime();
	blog_counts : list<int> = {};
	post_counts : list<int> = {};
	year *= 10000;
	month *= 100;
	hd = web_database.Select( TextStat ).Where().EQ( 'suid', user.uid ).EQ( 'time_range' );
	if( year ==0 ){
		for( i = signup.year : now.year ){
			stat.blog_count = 0;
			stat.post_count = 0;
			hd.Bind( i * 10000 ).Query( stat );
			blog_counts.append( stat.blog_count );
			post_counts.append( stat.post_count );
		}
	}else if( month ==0 ){
		for( i = 1 : 12 ){
			stat.blog_count = 0;
			stat.post_count = 0;
			hd.Bind( year + i * 100 ).QueryOnce( stat );
			blog_counts.append( stat.blog_count );
			post_counts.append( stat.post_count );
		}
	}else if( day ==0 ){
		for( i = 1 : 31 ){
			stat.blog_count = 0;
			stat.post_count = 0;
			hd.Bind( year + month + i ).QueryOnce( stat );
			blog_counts.append( stat.blog_count );
			post_counts.append( stat.post_count );
		}
	}else{
		hd.Bind( year + month + day ).QueryOnce( stat );
		blog_counts.append( stat.blog_count );
		post_counts.append( stat.post_count );
	}
	web_database.Select( TextStat ).Where().EQ( 'suid', user.uid )
		.EQ( 'time_range', 0 ).QueryOnce( stat );
	return stat.blog_count, stat.post_count, blog_counts, post_counts;
}


routine GetLatestText( owner : User, blog_com_post=1 ) => list<recent_text>
{
	texts : list<recent_text> = {};
	user = User::{};
	atext = Text::{};
	sptext = SpaceText::{};
	time = time_now - month_in_seconds;
	hd = web_database.Select( SpaceText, Text, 11, User ).Where()
		.EQ( SpaceText, 'uid_space', owner.uid );
	if( blog_com_post ==1 ){
		hd.EQ( SpaceText, 'stid_reply', 0 ).EQ( 'blog', 1 );
	}else if( blog_com_post ==2 ){
		hd.GT( SpaceText, 'stid_reply', 0 );
	}else{
		hd.EQ( SpaceText, 'stid_reply', 0 ).EQ( 'forum', 1 ).EQ( 'blog', 0 );
	}
	hd.GT( SpaceText, 'time_create', time ).Match( SpaceText, Text, 'tid' )
		.Match( SpaceText, User, 'uid_author', 'uid' )
		.Sort( SpaceText, 'time_create', 1 ).Range( 5 );
	hd.Query( sptext, atext, user ){
#{
		texts.append( (recent_text)(sptext.stid_first, sptext.stid, sptext.time_create,
					user.username, atext.title, atext.brief));
#}
		texts.append( recent_text::{ sptext.stid_first, sptext.stid, sptext.time_create,
					user.username, atext.title, atext.brief } );
	}
	return texts;
}

#io.writeln( GetLatestText( User{ uid => 2 }, 3 ) );

#io.writeln( GetTextStat( User{uid=>1} ) );
routine CompleteText( stid : int, text : string, user="", edit=0 )
{
	if( text[:3] != "<!--" ) return text;
	pos = text.find( "-->" );
	if( pos <0 ) return text;
	suffix = text[4:pos-1];
	main = text[ pos+3 : ];
	url_base = "/space/" + user;
	keys = { 
		"space_" + suffix => space_owner.username,
		"url_base_" + suffix => url_base,
		"url_edit_" + suffix => url_base + "/edit/page/" + (string) stid,
		"edit_" + suffix => edit ? dict_lang[ 'edit' ] : "",
		"top_" + suffix => dict_lang[ 'top' ],
		"tooltip_" + suffix => edit ? dict_lang[ 'change_image' ] : '',
		"onclick_" + suffix => edit ? 'onclick' : 'id',
		"href_" + suffix => edit ? 'id' : 'href',
		"class_" + suffix => edit ? 'tooltip' : ''
	};
	return main.expand( keys, '@' );
}

routine GetPage( space : User, name : string, edit=0 )
{
	page = dict_lang[ 'page_not_exist' ];
	if( name == '' ) return 0, page, '<h2>' + page + '</h2>', 0,0,0,0;

	hd = web_database.Select( SpaceText, Text ).Where()
		.EQ( SpaceText, 'uid_space', space.uid ).EQ( SpaceText, 'name' )
		.Match( SpaceText, Text, 'tid' ).Bind( name );
	txt = Text::{};
	sptxt = SpaceText::{};
	page = dict_lang[ 'page_under_construction' ];
	if( hd.QueryOnce( sptxt, txt ) == 0 ) return 0, page, '<h2>' + page + '</h2>', 0,0,0,0;
	TextHit::Update( txt.tid );
	page = CompleteText( txt.stid, txt.content, space.username, edit );
	if( sptxt.hit_count ==0 ) sptxt.hit_count = 1;
	return txt.stid, txt.title, page, txt.time_create, txt.time_edit, sptxt.hit_count, txt.tid;
}
routine GetVersion( tid : int )
{
	hd = web_database.Select( TextVersion ).Where().EQ( 'tid', tid );
	tv = TextVersion::{};
	vnames = {};
	hd.Query( tv ){ vnames.append( tv.vname ); }
	return vnames;
}



routine GetSource( space : int, stid : int, section='', labels : list<label_t> ={} )
{
	hd = web_database.Select( SpaceText, Text ).Where()
		.EQ( SpaceText, 'uid_space', space ).EQ( SpaceText, 'stid', stid )
		.Match( SpaceText, Text, 'tid' );
	sptxt = SpaceText::{};
	txt = Text::{};
	hd.QueryOnce( sptxt, txt );
	source = txt.source;
	#{
	if( section.size() ){
		parser = Sdml2Html();
		parser.sectindex = section;
		parser.Parse( source );
		source = parser.section;
	}
	#}
	if( labels.size() ){
		txtlab = TextLabeling::{};
		hd = web_database.Select( TextLabeling ).Where().EQ( 'tid', sptxt.tid ).EQ( 'lid' );
		for( lab in labels ){
			if( hd.Bind( lab.lid ).QueryOnce( txtlab ) ) lab.checked = 'checked';
		}
	}
	return { 'title' => txt.title, 'source' => source, 'section' => section,
		'name' => sptxt.name, 'blog'=>sptxt.blog, 'forum'=>sptxt.forum };
}

#s = GetSource( 2, 75 );




