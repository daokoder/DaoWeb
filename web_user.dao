
load web_data
load xxtea

global space_owner : User;

if( space_owner == none ){
	host = '';
	if( HTTP_ENV.has( 'HTTP_HOST' ) ) host = HTTP_ENV[ 'HTTP_HOST' ];
	space_owner = User::{};
	if( HTTP_GET.has( 'space' ) ){
		space_owner.username = HTTP_GET[ 'space' ];
	}else if( HTTP_POST.has( 'space' ) ){
		space_owner.username = HTTP_POST[ 'space' ];
	}else{
		space_owner.username = WEB_SPACE;
	}
	hd = web_database.Select( User ).Where().EQ( 'username' ).Bind( space_owner.username );
	hd.QueryOnce( space_owner );
	fullname = space_owner.fullname;
	country = space_owner.country;
	if( language == 'zh' ){
		fullname.change( '[%w%s%.]+', '' );
		country.change( '[%w%s%.]+', '' );
	}else{
		tks = fullname.split();  fullname = '';
		for( tk in tks ) if( tk.size() <=2 ) fullname += tk;
		tks = country.split();  country = '';
		for( tk in tks ) if( tk.size() <=2 ) country += tk;
	}
	if( fullname != '' ) space_owner.fullname = fullname;
	if( space_owner.fullname == '' ) space_owner.fullname = space_owner.username;
	if( country != '' ) space_owner.country = country;
}

if( User::Current == none ){
	cookie = User::Identify( HTTP_COOKIE.has( 'USER' ) ? HTTP_COOKIE[ 'USER' ] : '' );
}


#===========
# User
#===========
static routine User::Identify( cookie ='' )
{
	User::Cookie = cookie;
	setcookie = '';

	if( Super == none ){
		Super = User::{};
		Current = User::{};
		handle = web_database.Select( User ).Where().EQ( "username" ).Bind( WEB_SPACE );
		handle.QueryOnce( Super );
	}
	Status = USER_NOT_LOGIN;

	online = Online::{};
	handle = web_database.Select( User, Online ).Where().EQ( Online, "cookie" )
		.Match( User, Online, "uid" ).Bind( cookie );

	handle.Query( Current, online ){
		User::Status = USER_WAS_LOGIN;
		time = sys::time();
		if( ( time - online.time_active ) < 3600 ){
			User::Status = USER_IS_LOGIN;
			handle2 = web_database.Update( Online ).Set( "time_active", time ).Where().EQ( "uid", Current.uid );
			handle2.QueryOnce();
			setcookie = "Set-Cookie: USER=" + HTTP_COOKIE["USER"] 
				+ ";expires=" + cookie_time_2h + '; path=/ \n';
			break;
		}else{
			User::Current.uid = 0;
			User::Current.username = '';
		}
	}
	return setcookie;
}

static routine User::SignUp( name : string, pwd :string, pwd2 :string )
{
	errormsg = "";

	substr = name.match( '%a%w*' ).substring;
	if( name.size()>50 || pwd.size()>50 ){
		errormsg = dict_lang["username_long"];
	}else if( name.size() == 0 || substr != name ){
		errormsg = dict_lang["invalid_username"];
	}else if( pwd.size() < 6 ){
		errormsg = dict_lang["password_short"]
	}else if( pwd != pwd2 ){
		errormsg = dict_lang["password_unmatch"]
	}else{
		handle = web_database.Select( User ).Where().EQ( "username" ).Bind( name );
		if( handle.QueryOnce() ) errormsg = dict_lang["username_used"];
	}

	if( errormsg.size() == 0 ){
		pwd = pwd.encrypt( WEB_PWD_KEY, $hex );
		time = sys::time();
		user = User::{ username => name, password => pwd, time_signup => time };
		web_database.Insert( user );
#{ not needed anymore; use url rewriting instead
		MakeFolds( name );
#}
	}
	return errormsg;
}

static routine User::Login( name : string, pwd : string )
{
	addr = HTTP_ENV.has( "REMOTE_ADDR" ) ? HTTP_ENV["REMOTE_ADDR"] : "";
	cookie = addr + sys::ctimef(0,"%Y%M%D%H%I%S");
	cookie += random_string( 50 - cookie.size() );
	Cookie = cookie;

	errormsg = "";
	substr = name.match( '%a%w*' ).substring;
	if( name.size() == 0 || substr != name ){
		errormsg = dict_lang["invalid_username"];
	}else{
		pwd = pwd.encrypt( WEB_PWD_KEY, $hex );
		handle = web_database.Select( User ).Where().EQ( "username" ).Bind( name );
		if( handle.QueryOnce( Current ) ==0 ) errormsg = dict_lang["user_not_exist"];
		if( Current.password != pwd ){ errormsg = dict_lang["wrong_password"] }
	}
	if( errormsg.size() ) return errormsg;

	tm = sys::time();
	online = Online::{ uid=> Current.uid, time_login=> tm, time_active=> tm, cookie=> cookie};
	handle = web_database.Select( Online ).Where().EQ( "uid", Current.uid );
	if( handle.QueryOnce( online ) ==0 ) web_database.Insert( online );
	handle = web_database.Update( Online ).Set( "cookie" ).Set( "time_login", tm )
		.Set( "time_active", tm ).Where().EQ( "uid", Current.uid ).Bind( cookie );
	handle.QueryOnce();
	User::Cookie = cookie;
	return errormsg;
}

static routine User::Logout()
{
	#handle = web_database.Delete( Online ).Where().EQ( "uid", Current.uid ).EQ( "cookie", Cookie );
	handle = web_database.Update( Online ).Set( 'time_active', 0 )
		.Where().EQ( "uid", Current.uid ).EQ( "cookie" ).Bind( Cookie );
	handle.QueryOnce();
}

routine User::Set()
{
	web_database.Update( User ).Set( 'fullname' ).Set( 'country' )
		.Where().EQ( "uid", uid ).Bind( fullname ).Bind( country, 1 ).QueryOnce();
}

routine UserInfo::Get() => int
{
	return web_database.Select( UserInfo ).Where().EQ( "uid", uid ).QueryOnce( self );
}
routine UserInfo::Set()
{
	if( web_database.Select( UserInfo ).Where().EQ( "uid", uid ).QueryOnce() == 0 ){
		web_database.Insert( self );
		return;
	}
	web_database.Update( UserInfo ).Set( 'first_name' ).Set( 'last_name').Set( 'email' )
		.Where().EQ( "uid", uid ).Bind( first_name ).Bind( last_name, 1 ).Bind( email, 2 )
		.QueryOnce();
}

#{
io.writeln( 'content-type: text/plain\n\n' )
io.writeln( User::SignUp( "test", "123456", "123456" ) );
io.writeln( User::Login( "test", "123456" ) );
io.writeln( User::Login( "test2", "123456" ) );
User::Logout();
#}
